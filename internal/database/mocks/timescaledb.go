// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tejusbharadwaj/edgecom/internal/database (interfaces: TimeSeriesRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	models "github.com/tejusbharadwaj/edgecom/internal/models"
)

// MockTimeSeriesRepository is a mock of TimeSeriesRepository interface.
type MockTimeSeriesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTimeSeriesRepositoryMockRecorder
}

// MockTimeSeriesRepositoryMockRecorder is the mock recorder for MockTimeSeriesRepository.
type MockTimeSeriesRepositoryMockRecorder struct {
	mock *MockTimeSeriesRepository
}

// NewMockTimeSeriesRepository creates a new mock instance.
func NewMockTimeSeriesRepository(ctrl *gomock.Controller) *MockTimeSeriesRepository {
	mock := &MockTimeSeriesRepository{ctrl: ctrl}
	mock.recorder = &MockTimeSeriesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimeSeriesRepository) EXPECT() *MockTimeSeriesRepositoryMockRecorder {
	return m.recorder
}

// BatchInsertTimeSeriesData mocks base method.
func (m *MockTimeSeriesRepository) BatchInsertTimeSeriesData(arg0 context.Context, arg1 []models.TimeSeriesData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchInsertTimeSeriesData", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchInsertTimeSeriesData indicates an expected call of BatchInsertTimeSeriesData.
func (mr *MockTimeSeriesRepositoryMockRecorder) BatchInsertTimeSeriesData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchInsertTimeSeriesData", reflect.TypeOf((*MockTimeSeriesRepository)(nil).BatchInsertTimeSeriesData), arg0, arg1)
}

// Close mocks base method.
func (m *MockTimeSeriesRepository) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTimeSeriesRepositoryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTimeSeriesRepository)(nil).Close))
}

// InsertTimeSeriesData mocks base method.
func (m *MockTimeSeriesRepository) InsertTimeSeriesData(arg0 time.Time, arg1 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTimeSeriesData", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertTimeSeriesData indicates an expected call of InsertTimeSeriesData.
func (mr *MockTimeSeriesRepositoryMockRecorder) InsertTimeSeriesData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTimeSeriesData", reflect.TypeOf((*MockTimeSeriesRepository)(nil).InsertTimeSeriesData), arg0, arg1)
}

// Query mocks base method.
func (m *MockTimeSeriesRepository) Query(arg0 context.Context, arg1, arg2 time.Time, arg3, arg4 string) ([]models.TimeSeriesData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]models.TimeSeriesData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockTimeSeriesRepositoryMockRecorder) Query(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockTimeSeriesRepository)(nil).Query), arg0, arg1, arg2, arg3, arg4)
}

// QueryTimeSeriesData mocks base method.
func (m *MockTimeSeriesRepository) QueryTimeSeriesData(arg0 context.Context, arg1, arg2 time.Time, arg3, arg4 string) ([]models.TimeSeriesData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryTimeSeriesData", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]models.TimeSeriesData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTimeSeriesData indicates an expected call of QueryTimeSeriesData.
func (mr *MockTimeSeriesRepositoryMockRecorder) QueryTimeSeriesData(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTimeSeriesData", reflect.TypeOf((*MockTimeSeriesRepository)(nil).QueryTimeSeriesData), arg0, arg1, arg2, arg3, arg4)
}
